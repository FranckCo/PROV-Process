@prefix ex-act: <http://example.org/linkage/activity/> .
@prefix ex-prod: <http://example.org/linkage/product/> .
@prefix prov: <http://www.w3.org/ns/prov#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix dqm: <http://purl.org/dqm-vocabulary/v1/dqm#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# Source index data sets to linkage-ready index datasets

# Should be a prov:Collection? (same question for all the datasets entities)
# Fully defined in fragment 1, repeated here for completeness
ex-prod:sourceIndexDatasets a prov:Entity ;
        rdfs:label "Source index datasets"@en .

ex-prod:linkageReadyIndexDatasets a prov:Entity ;
        rdfs:label "Linkage-ready index datasets"@en ;
        prov:wasDerivedFrom ex-prod:sourceIndexDatasets ;
        prov:qualifiedDerivation [
             a prov:Derivation ;
             prov:entity ex-prod:sourceIndexDatasets ;
             prov:hadActivity ex-act:identifyInScopeRecords ;
        ] .

# Maybe call this activity "select in-scope records": "identify" does not change the datasets (text uses "subset")
ex-act:identifyInScopeRecords a prov:Activity ;
        rdfs:label "Identify in-scope records"@en ;
        prov:wasInformedBy ex-act:assessLinkageVariable .

ex-act:assessLinkageVariable a prov:Activity ;
        rdfs:label "Assess linkage variables"@en .

# Using the "product" namespace for this entity is probably wrong
# Explain the use of dqm:MatchingValueRule
ex-prod:inclusionExclusionCriteria a prov:Entity , dqm:MatchingValueRule ;
        dqm:assessment "true"^^xsd:boolean .

# inclusionExclusionCriteria could be generated by a defineInclusionExclusionCriteria activity
# See lineage relation with [dqm:Accuracy, dqm:Completeness; dqm:Uniqueness]